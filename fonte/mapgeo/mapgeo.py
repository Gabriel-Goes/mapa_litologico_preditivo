# -*- coding: utf-8 -*-
"""
/***************************************************************************
 mapgeo
                                 A QGIS plugin
 Plugin para aprimorar tecnica de mapeamento geologico
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-15
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Intelli+geo
        email                : gabrielgoes@usp.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from .resources import *
from .mapgeo_dialog import mapgeoDialog
import os.path
import logging

# MAPGEO
# from .nucleo.databaseengine import DatabaseEngine

# Configure logging to file
log_file = os.path.join(os.path.dirname(__file__), 'mapgeo.log')
file_handler = logging.FileHandler(log_file)
file_handler.setLevel(logging.DEBUG)
logging.basicConfig(filename=log_file, level=logging.DEBUG,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('mapgeo')


class mapgeo:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        logger.info("################################################################################")
        logger.info("Inicializando o plugin mapgeo")
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(self.plugin_dir, 'i18n', 'mapgeo_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr(u'&Mapeamento Geologico')
        self.first_start = None

        logger.info("mapgeo plugin initialized")

    def tr(self, message):
        return QCoreApplication.translate('mapgeo', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None
    ) -> QAction:

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToDatabaseMenu(self.menu, action)

        self.actions.append(action)
        logger.debug(f"Action '{text}' added to the menu and toolbar.")
        return action

    def initGui(self):
        icon_path = ':/plugins/mapgeo/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'mapgeo'),
            callback=self.run,
            parent=self.iface.mainWindow()
        )

        self.first_start = True
        logger.info("mapgeo plugin GUI initialized.")

    def unload(self):
        for action in self.actions:
            self.iface.removePluginDatabaseMenu(self.tr(u'&Mapeamento Geologico'), action)
            self.iface.removeToolBarIcon(action)
        logger.info("mapgeo plugin unloaded.")

    def run(self):
        if self.first_start:
            self.first_start = False
            self.dlg = mapgeoDialog(self.iface)
            logger.info("Dialog initialized.")

        # Check if dialog is correctly loaded
        if self.dlg is not None:
            logger.debug("Displaying the dialog.")
            self.dlg.show()
        else:
            logger.error("Failed to load the dialog.")

        # Run the dialog event loop
        result = self.dlg.exec_()

        if result:
            logger.info("Dialog executed successfully.")
        else:
            logger.warning("Dialog execution was canceled or failed.")
